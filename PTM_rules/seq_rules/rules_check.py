#######################
# Code - rules_check.py
#######################

# Very basic test code 
# Takes a sequence
# and sees what is before P
# potentially use to statistically calculate
# if what we get from LCMSMS data is significant

import pandas as pd
sequence = "QMSYGYDEKSTGGISVPGPMGPSGPRGLPGPPGAPGPQGFQGPPGEPGEPGASGPMGPRGPPGPPGKNGDDGEAGKPGRPGERGPPGPQGARGLPGTAGLPGMKGHRGFSGLDGAKGDAGPAGPKGEPGSPGENGAPGQMGPRGLPGERGRPGAPGPAGARGNDGATGAAGPPGPTGPAGPPGFPGAVGAKGEAGPQGARGSEGPQGVRGEPGPPGPAGAAGPAGNPGADGQPGAKGANGAPGIAGAPGFPGARGPSGPQGPSGPPGPKGNSGEPGAPGNKGDTGAKGEPGPTGIQGPPGPAGEEGKRGARGEPGPTGLPGPPGERGGPGSRGFPGADGVAGPKGPAGERGSPGPAGPKGSPGEAGRPGEAGLPGAKGLTGSPGSPGPDGKTGPPGPAGQDGRPGPPGPPGARGQAGVMGFPGPKGAAGEPGKAGERGVPGPPGAVGPAGKDGEAGAQGPPGPAGPAGERGEQGPAGSPGFQGLPGPAGPPGEAGKPGEQGVPGDLGAPGPSGARGERGFPGERGVQGPPGPAGPRGANGAPGNDGAKGDAGAPGAPGSQGAPGLQGMPGERGAAGLPGPKGDRGDAGPKGADGSPGKDGVRGLTGPIGPPGPAGAPGDKGEAGPSGPAGPTGARGAPGDRGEPGPPGPAGFAGPPGADGQPGAKGEPGDAGAKGDAGPPGPAGPTGPPGPIGNVGAPGPKGARGSAGPPGATGFPGAAGRVGPPGPSGNAGPPGPPGPVGKEGGKGPRGETGPAGRPGEVGPPGPPGPAGEKGSPGADGPAGAPGTPGPQGIAGQRGVVGLPGQRGERGFPGLPGPSGEPGKQGPSGXSGERGPPGPMGPPGLAGPPGESGREGSPGAEGSPGRDGSPGPKGDRGETGPAGPPGAPGAPGAPGPVGPAGKSGDRGETGPAGPAGPIGPVGARGPAGPQGPRGDKGETGEQGDRGIKGHRGFSGLQGPPGPPGSPGEQGPSGASGPAGPRGPPGAAGSPGKDGLNGLPGPIGPPGPRGRTGDAGPVGPPGPPGPPGPPGPPSGGFDFSFLPQPPQEKAHDGGRYYRARQYDGKGVGLGPGPMGLMGPRGPPGASGAPGPQGFQGPAGEPGEPGQTGPAGARGPPGPPGKAGEDGHPGKPGRPGERGVVGPQGARGFPGTPGLPGFKGIRGHNGLDGLKGQPGAPGVKGEPGAPGENGTPGQTGARGLPGERGRVGAPGPAGARGSDGSVGPVGPAGPIGSAGPPGFPGAPGPKGELGPVGNPGPAGPAGPRGELGLPGVSGPVGPPGNPGANGLTGAKGAAGLPGVAGAPGLPGPRGIPGPVGAAGATGARGLVGEPGPAGSKGESGNKGEPGSAGPQGPPGPSGEEGKRGPNGEAGSAGPSGPPGLRGSPGSRGLPGADGRAGVMGPPGPRGATGPAGVRGPNGDAGRPGEPGLMGPRGFPGAPGNVGPAGKEGPMGLPGIDGRPGPIGPAGARGEPGNIGFPGPKGPTGDPGKNGDKGHAGLAGARGAPGPDGNNGAQGPPGPQGVQGGKGEQGPAGPPGFQGLPGPAGTAGEVGKPGERGLPGEFGLPGPAGPRGERGPPGESGAAGPSGPIGSRGPSGPPGPDGNKGEPGVLGAPGTAGXSGPGGLPGERGAAGXPGGKGEKGETGLRGEIGNPGRDGARGAPGAVGAPGPAGATGDRGEAGPAGPAGPAGPRGSPGERGEVGPAGPNGFAGPAGAAGQPGAKGERGTKGPKGENGPVGPTGPVGSAGPSGPNGPPGPAGSRGDGGPPGATGFPGAAGRTGPPGPSGITGPPGPPGAAGKEGLRGPRGDQGPVGRTGETGASGPPGFAGEKGPSGEPGTAGPPGTPGPQGLLGAPGILGLPGSRGERGLPGVSGSVGEPGPLGISGPPGARGPSGAVGAPGVNGAPGEAGRDGNPGNDGPPGRDGQPGHKGERGYPGNIGPVGAVGAPGPHGPVGPTGKHGNRGEPGPAGVVGPVGAVGPRGPTGPQGIRGDKGEPGDKGPRGLPGLKGHNGLQGLPGLAGQHGDQGAPGSVGPAGPRGPAGPSGPMGKDGRTGHPGSVGPAGVRGSQGSQGPAGPPGPPGPPGPPGPSGGGYDFGYEGDFYRA"


#loops through protein sequence
#find the residue before P
#and adds it to a list
rule_list = []
index = 0
for res in sequence:
    if res == "P":
        res_bef = sequence[index + 1]
        rule_list.append(res_bef)
    index += 1

#turns this list into a dictionary where key is aa in list
#and value is the count of that aa in the list 
rule_dict = {}
for x in rule_list:
    if x in rule_dict.keys():
        rule_dict[x] = rule_dict.get(x) + 1
    else:
        rule_dict[x] = 0
        rule_dict[x] = rule_dict.get(x) + 1

#turns the dictionary into a dataframe
pep_bef_df = pd.DataFrame.from_dict(rule_dict, orient = 'index', columns = ["Count"])
#calculates the percentage of the residues before P
total_count = pep_bef_df["Count"].sum()
pep_bef_df["Percentage"] = (pep_bef_df["Count"] / total_count) * 100
pep_bef_df = pep_bef_df.sort_values(by = ["Count"], ascending= False)

print(pep_bef_df.head())
#pep_bef_df.to_csv('pep_bef_check.csv', index = True)

###The same but looking at two aas before P
rule_list = []
index = 0
for res in sequence:
    if res == "P":
        #looking at two aas before rather than one
        res_bef = sequence[index - 2] + sequence[index + 1]
        rule_list.append(res_bef)
    index += 1

rule_dict = {}
for x in rule_list:
    if x in rule_dict.keys():
        rule_dict[x] = rule_dict.get(x) + 1
    else:
        rule_dict[x] = 0
        rule_dict[x] = rule_dict.get(x) + 1

pep_bef_df = pd.DataFrame.from_dict(rule_dict, orient = 'index', columns = ["Count"])
total_count = pep_bef_df["Count"].sum()
pep_bef_df["Percentage"] = (pep_bef_df["Count"] / total_count) * 100
pep_bef_df = pep_bef_df.sort_values(by = ["Count"], ascending= False)

print(pep_bef_df.head())
#pep_bef_df.to_csv('pep_bef_check.csv', index = True)


